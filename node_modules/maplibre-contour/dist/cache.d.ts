import { CancelablePromise } from "./types";
interface CacheItem<V> {
    lastUsed: number;
    waiting: number;
    cancel?: () => void;
    item: Promise<V>;
}
/**
 * LRU Cache for CancelablePromises.
 * The underlying request is only canceled when all callers have canceled their usage of it.
 */
export default class AsyncCache<K, V> {
    maxSize: number;
    items: Map<K, CacheItem<V>>;
    constructor(maxSize?: number);
    size: () => number;
    get: (key: K, supplier: (key: K) => Promise<V>) => Promise<V>;
    getCancelable: (key: K, supplier: (key: K) => CancelablePromise<V>) => {
        value: Promise<V>;
        cancel: () => void;
    };
    prune(): void;
    clear: () => void;
}
export {};
